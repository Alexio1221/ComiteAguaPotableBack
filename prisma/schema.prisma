generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  idUsuario    Int          @id @default(autoincrement())
  nombres       String
  apellidos     String
  telefono     String       @unique
  ci           String       @unique
  chat_id      String?      @unique
  telegramToken String?     // <-- token temporal para deep link
  tokenExpira  DateTime?    // <-- opcional: expiración del token
  usuario      String       @unique
  contraseña  String
  creadoEn     DateTime     @default(now())
  modificadoEn DateTime     @updatedAt
  sesiones     Sesion[]
  roles        UsuarioRol[]
  recuperaciones Recuperacion[]
  medidores    Medidor[]
}

model Rol {
  idRol       Int          @id @default(autoincrement())
  nombreRol   String
  descripcion String
  funciones   Funcion[]
  usuarios    UsuarioRol[]
}

model UsuarioRol {
  idUsuario         Int
  idRol             Int
  estado            Boolean  @default(true) 
  fechaCreacion     DateTime @default(now())
  fechaModificacion DateTime @updatedAt
  rol               Rol      @relation(fields: [idRol], references: [idRol])
  usuario           Usuario  @relation(fields: [idUsuario], references: [idUsuario])

  @@id([idUsuario, idRol])
}

model Funcion {
  idFuncion     Int    @id @default(autoincrement())
  idRol         Int
  nombreFuncion String
  icono         String
  rol           Rol    @relation(fields: [idRol], references: [idRol])
}

model Sesion {
  idSesion      Int      @id @default(autoincrement())
  idUsuario     Int
  rolActual     String
  tokenSesion   String   @unique
  estado        Boolean  @default(true)
  creadoEn      DateTime @default(now())
  actualizadoEn DateTime @updatedAt
  usuario       Usuario  @relation(fields: [idUsuario], references: [idUsuario])
}

model Recuperacion {
  idRecuperacion Int      @id @default(autoincrement())
  idUsuario      Int
  codigo         String
  estado         Boolean  @default(true)  // true = activo, false = usado o expirado
  creadoEn       DateTime @default(now())
  expiraEn       DateTime  

  usuario        Usuario  @relation(fields: [idUsuario], references: [idUsuario])
}

model Medidor {
  idMedidor    Int    @id @default(autoincrement())
  idSocio      Int
  idCategoria  Int
  estado       Estado    @default(INACTIVO)
  categoria    Categoria @relation(fields: [idCategoria], references: [idCategoria])
  socio        Usuario   @relation(fields: [idSocio], references: [idUsuario])
  ubicacionSocio UbicacionSocio[]
}

model Categoria {
  idCategoria  Int    @id @default(autoincrement())
  tipo         String
  tarifa       Float
  tarifaAdicional Float
  descripcion  String
  medidores    Medidor[]
}

model UbicacionSocio {
  idUbicacion  Int    @id @default(autoincrement())
  idMedidor    Int
  direccion    String
  latitud      Float
  longitud     Float
  descripcion  String
  medidor    Medidor @relation(fields: [idMedidor], references: [idMedidor])
}

enum Estado {
  ACTIVO
  INACTIVO
  SUSPENDIDO
}
