generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  idUsuario    Int          @id @default(autoincrement())
  nombre       String
  apellidos     String
  telefono     String       @unique
  ci           String       @unique
  chat_id      String?      @unique
  telegramToken String?     // <-- token temporal para deep link
  tokenExpira  DateTime?    // <-- opcional: expiración del token
  usuario      String       @unique
  contraseña  String
  creadoEn     DateTime     @default(now())
  modificadoEn DateTime     @updatedAt
  sesiones     Sesion[]
  roles        UsuarioRol[]
  recuperaciones Recuperacion[]
  medidores    Medidor[]
  asistencias  Asistencia[]
  comprobabantes Comprobante[]
}

model Rol {
  idRol       Int          @id @default(autoincrement())
  nombreRol   String
  descripcion String
  funciones   Funcion[]
  usuarios    UsuarioRol[]
}

model UsuarioRol {
  idUsuario         Int
  idRol             Int
  estado            Boolean  @default(true) 
  fechaCreacion     DateTime @default(now())
  fechaModificacion DateTime @updatedAt
  rol               Rol      @relation(fields: [idRol], references: [idRol])
  usuario           Usuario  @relation(fields: [idUsuario], references: [idUsuario])

  @@id([idUsuario, idRol])
}

model Funcion {
  idFuncion     Int    @id @default(autoincrement())
  idRol         Int
  nombreFuncion String
  icono         String
  rol           Rol    @relation(fields: [idRol], references: [idRol])
}

model Sesion {
  idSesion      Int      @id @default(autoincrement())
  idUsuario     Int
  rolActual     String
  tokenSesion   String   @unique
  estado        Boolean  @default(true)
  creadoEn      DateTime @default(now())
  actualizadoEn DateTime @updatedAt
  usuario       Usuario  @relation(fields: [idUsuario], references: [idUsuario])
}

model Recuperacion {
  idRecuperacion Int      @id @default(autoincrement())
  idUsuario      Int
  codigo         String
  estado         Boolean  @default(true)  // true = activo, false = usado o expirado
  creadoEn       DateTime @default(now())
  expiraEn       DateTime  

  usuario        Usuario  @relation(fields: [idUsuario], references: [idUsuario])
}

model Medidor {
  idMedidor    Int    @id @default(autoincrement())
  idSocio      Int
  idCategoria  Int
  fechaRegistro DateTime @default(now())
  estado       Estado    @default(ACTIVO)
  categoria    Categoria @relation(fields: [idCategoria], references: [idCategoria])
  socio        Usuario   @relation(fields: [idSocio], references: [idUsuario])
  ubicacionSocio UbicacionSocio?
  lecturas Lectura[]
}

model Categoria {
  idCategoria  Int    @id @default(autoincrement())
  tipo         String
  tarifa       Decimal   //tarifa basica
  tarifaAdicional Decimal
  limiteBasico Decimal
  descripcion  String
  medidores    Medidor[]
}

model UbicacionSocio {
  idUbicacion  Int    @id @default(autoincrement())
  idMedidor    Int    @unique
  direccion    String
  latitud      Float
  longitud     Float
  descripcion  String
  medidor     Medidor @relation(fields: [idMedidor], references: [idMedidor])
}

model NoticiasYAvisos {
  idNoticiaAviso   Int   @id @default(autoincrement())
  titulo           String
  descripcion      String
  fechaPublicacion DateTime @default(now())
  fechaVigencia    DateTime
  imagen           String?
}

model Reunion {
  idReunion         Int        @id @default(autoincrement())
  tipo              String
  fecha             DateTime   
  hora              String     // hora en formato 'HH:mm'
  lugar             String
  motivo            String
  descripcion       String
  documentoAsamblea String?

  asistencias       Asistencia[]
}

model Asistencia {
  idReunion Int
  idUsuario Int
  estado    EstadoAsistencia @default(AUSENTE)
  registradoEn DateTime // cuando marcó asistencia
  observacion String?  // en casos de tener una justificacion

  reunion   Reunion @relation(fields: [idReunion], references: [idReunion])
  usuario   Usuario @relation(fields: [idUsuario], references: [idUsuario])

  @@id([idReunion, idUsuario])
}

model Lectura {
  idLectura        Int       @id @default(autoincrement())
  idMedidor        Int
  lecturaActual    Decimal   @default(0)
  lecturaAnterior  Decimal   @default(0)
  consumo          Decimal   @default(0)
  fechaLectura     DateTime   @default(now())
  observaciones      String?
  estado           EstadoLectura @default(PENDIENTE)

  medidor          Medidor    @relation(fields: [idMedidor], references: [idMedidor])
  comprobante      Comprobante?
}

model Comprobante {
  idComprobante   Int       @id @default(autoincrement())
  idLectura       Int       @unique
  idOperador       Int
  idPago          Int?
  fechaEmision    DateTime  @default(now())
  montoBasico     Decimal
  montoAdicional  Decimal
  moraAcumulada   Decimal   @default(0)
  totalPagar      Decimal
  estadoPago      EstadoPago @default(PENDIENTE)
  fechaLimite     DateTime

  lectura         Lectura   @relation(fields: [idLectura], references: [idLectura])
  usuario         Usuario   @relation(fields: [idOperador], references: [idUsuario])
  pago            Pago?     @relation(fields: [idPago], references: [idPago])
}

model Pago {
  idPago        Int       @id @default(autoincrement())
  montoPagado   Decimal
  fechaPago     DateTime  @default(now())  
  comprobanteArchivo String? 

  comprobantes   Comprobante[]
}

enum EstadoAsistencia {
  PRESENTE
  RETRASO
  AUSENTE
  JUSTIFICADO
}

//Para el medidor
enum Estado {
  ACTIVO
  INACTIVO
  SUSPENDIDO
}

enum EstadoLectura {
  REGISTRADO
  PENDIENTE
}

enum EstadoPago {
  PENDIENTE
  PAGADO
  VENCIDO
}